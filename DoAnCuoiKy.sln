using System;
using System.Diagnostics;
using System.Text;
using static System.Net.Mime.MediaTypeNames;
using System.Media;
using System.IO;
using System.Threading;
using System.Collections.Generic;
using System.Linq;

class Game
{
    static char[,] maze = new char[10, 10] //khởi tạo một mảng hai chiều maze với kích thước là 10x10. Mỗi phần tử của mảng đại diện cho một ô trong mê cung và chứa một ký tự.
    {
            { '╔', '═', '═', '═', '═', '═', '═', '═', '═', '╗' },
            { '║', '.', '.', '!', '.', '#', '.', '.', '.', '║' },
            { '║', '.', '!', '.', '.', '!', '.', '.', '#', '║' },
            { '║', '!', '.', '#', '#', '.', '.', '!', '.', '║' },
            { '║', '.', '.', '!', '.', '!', '#', '.', '#', '║' },
            { '║', '!', '#', '#', '#', '.', '.', '!', '.', '║' },
            { '║', '.', '!', '.', '.', '!', '#', '.', '!', '║' },
            { '║', '#', '.', '#', '!', '.', '.', '!', '.', '║' },
            { '║', '.', '.', '.', '#', '.', '!', '.', '.', '║' },
            { '╚', '═', '═', '═', '═', '═', '═', '═', '═', '╝' }
    };

    static char[,] originalMaze = new char[,]  // Mảng hai chiều đại diện cho mê cung gốc.
    {
            { '╔', '═', '═', '═', '═', '═', '═', '═', '═', '╗' },
            { '║', '.', '.', '!', '.', '#', '.', '.', '.', '║' },
            { '║', '.', '!', '.', '.', '!', '.', '.', '#', '║' },
            { '║', '!', '.', '#', '#', '.', '.', '!', '.', '║' },
            { '║', '.', '.', '!', '.', '!', '#', '.', '#', '║' },
            { '║', '!', '#', '#', '#', '.', '.', '!', '.', '║' },
            { '║', '.', '!', '.', '.', '!', '#', '.', '!', '║' },
            { '║', '#', '.', '#', '!', '.', '.', '!', '.', '║' },
            { '║', '.', '.', '.', '#', '.', '!', '.', '.', '║' },
            { '╚', '═', '═', '═', '═', '═', '═', '═', '═', '╝' }
    };

    static char[,] savedMaze; // Mê cung đã lưu trước khi dừng tạm thời.
    static int savedPlayerRow; // Vị trí hàng đã lưu trước khi dừng tạm thời.
    static int savedPlayerCol; // Vị trí cột đã lưu trước khi dừng tạm thời. 

    //Khai báo vị trí người chơi
    static int playerX = 2;
    static int playerY = 2;

    static int exitX = 8;
    static int exitY = 8;

    static Stopwatch stopwatch = new Stopwatch();
    static Random random = new Random(); //tạo một đối tượng Random để sinh số ngẫu nhiên và gán cho biến random.
    static bool isPaused = false; // Biến để kiểm tra trạng thái dừng tạm thời.
    static TimeSpan pausedTime = TimeSpan.Zero; // Biến để lưu thời gian đã dừng tạm thời.

    static void DrawMaze()
    {
        for (int i = 0; i < 10; i++) //bắt đầu một vòng lặp for để duyệt qua các hàng trong mê cung.
        {
            for (int j = 0; j < 10; j++)//bắt đầu một vòng lặp for lồng bên trong để duyệt qua các cột trong mê cung.
                if (i == playerX && j == playerY)
                {
                    Console.Write('☺'); // Vị trí bắt đầu
                }
                else if (i == exitX && j == exitY)
                {
                    Console.Write('E'); // Vị trí kết thúc
                }
                else
                {
                    Console.Write(maze[i, j]); //in ký tự tại vị trí [i, j] của mê cung lên màn hình mà không xuống dòng.
                }
            Console.WriteLine();
        }
    }

    static void MovePlayer(ConsoleKey key) //phương thức để di chuyển người chơi trong mê cung dựa trên phím mũi tên được nhấn
    {
        Console.OutputEncoding = Encoding.UTF8;
        //lưu trữ vị trí mới của người chơi
        int newX = playerX;
        int newY = playerY;

        switch (key)
        {
            case ConsoleKey.UpArrow:
                newX = playerX - 1;
                break;
            case ConsoleKey.DownArrow:
                newX = playerX + 1;
                break;
            case ConsoleKey.LeftArrow:
                newY = playerY - 1;
                break;
            case ConsoleKey.RightArrow:
                newY = playerY + 1;
                break;
        }

        if ((maze[newX, newY] != '#') && (maze[newX, newY] != '║') && (maze[newX, newY] != '═'))
        {
            if (maze[newX, newY] == '!')
            {
                if (AskQuestion()) //hàm AskQuestion() được gọi để hiển thị câu hỏi cho người chơi và trả về kết quả (true nếu người chơi trả lời đúng và false nếu người chơi trả lời sai).
                {
                    maze[playerX, playerY] = '.';//ô hiện tại được đánh dấu.
                    //cập nhập tọa độ mới
                    playerX = newX;
                    playerY = newY;
                    maze[playerX, playerY] = '☺';//ô mới thành mặt cười để đánh dấu vị trí người chơi
                }
                else
                {
                    maze[newX, newY] = '#'; // Trả lời sai, ký tự '!' trở thành '#'
                }
            }
            else
            {
                //ô mới không phải ! thì di chuyển như bình thường
                maze[playerX, playerY] = '.';
                playerX = newX;
                playerY = newY;
                maze[playerX, playerY] = '☺';
            }
        }
    }
    static List<int> usedQuestions = new List<int>(); // Danh sách các câu hỏi đã sử dụng
    static bool AskQuestion()
    {
        Console.OutputEncoding = Encoding.UTF8;
        string[,] questions = new string[,]
        {
        { "Bỏ ngoài nướng trong, ăn ngoài bỏ trong là gì?", "nướng ngô", "nướng trứng", "nướng khoai" },
        { "Con gì mang được miếng gỗ lớn nhưng không mang được hòn sỏi?", "con sông", "con đường", "con đèo" },
        { "Cái gì ở giữa bầu trời và trái đất", "và", "mây", "gió" },
        { "Thủ đô của Anh là?", "London", "Paris", "Berlin" },
        { "Mồm bò không phải mồm bò mà lại là mồm bò là gì?", "ốc sên", "con bò", "con ngựa" },
        { "Thủ đô của Việt Nam là?", "Hà Nội","Hồ Chí Minh",  "Đà Nẵng" },
        { "Tỉnh thành nào nằm ở cực Bắc của Việt Nam?", "Hà Giang", "Sơn La", "Lạng Sơn" },
        { "Tỉnh thành nào là điểm đất liền xa nhất về phía Đông của Việt Nam?", "Khánh Hòa", "Phú Yên", "Bình Định" },
        { "Đâu là tỉnh thành không giáp biển?", "Lào Cai", "Quảng Bình", "Ninh Bình" },
        { "Ai là người đầu tiên đặt chân lên Mặt Trăng?", "Neil Armstrong", "Buzz Aldrin", "Yuri Gagarin" },
        { "Đâu là tên một loại chợ?","Cóc","Ếch", "Nhái"},
        { "Đâu là tên một bãi biển ở Quảng Bình?","Đá Nhảy","Đá Lăn","Đá Chạy"},
        { "Tháng âm lịch nào còn được gọi là Tháng cô hồn ?","Tháng bảy","Tháng tám","Tháng chín"},
        { "Bảo tàng Hồ Chí Minh ở thủ đô Hà Nội được thiết kế theo hình dáng loại hoa nào?","Hoa sen","Hoa hồng","Hoa đào"},
        { "Cái gì có thể chạy mà không di chuyển?","Đồng hồ","Máy bay","Giày"},
        { "Tỉnh thành nào nổi tiếng với vịnh Hạ Long?", "Quảng Ninh", "Bắc Ninh", "Hải Phòng" },
        { "Bức tranh nổi tiếng 'Mona Lisa' được vẽ bởi họa sĩ nào?", "Leonardo da Vinci", "Vincent van Gogh", "Pablo Picasso"},
        { "Tổng thống nước Mỹ thứ 45 là ai?", "Joe Biden", "Barack Obama", "Donald Trump"},
        { "Tên của công ty công nghệ lớn nhất ở Hàn Quốc là gì?", "Samsung Electronics", "LG Electronics", "SK Hynix"},
        { "Thủ đô của Hà Lan là gì?", "Amsterdam", "Moscow", "Rome"},
        { "Tác giả của quyển sách 'The Alchemist' (Nhà giả kim) là ai?", "Paulo Coelho", "Mario Puzo", "Mark Twain"},
        { "Nhà văn Victor Hugo là người nước nào?", "Pháp", "Ý", "Tây Ban Nha"},
        { "James Naismith đã phát minh ra trò chơi thể thao nào vào năm 1891?", "Bóng rổ", "Golf", "Quần vợt"},
        { "Nền văn hóa phục hưng bắt nguồn từ nước nào?", "Ý", "Thụy Sỹ", "Anh" },
        { "Chu kì của vật dao động điều hòa là?", "Thời gian để vật thực hiện được một dao động toàn phần.", "Thời gian ngắn nhất để vật đi từ biên này đến biên kia.", "Thời gian ngắn nhất để vật đi từ vị trí cân bằng ra biên." }
        };

        //Nếu số câu hỏi đã sử dụng bằng với số hàng của mảng questions, tức là đã sử dụng hết các câu hỏi trong danh sách, thì danh sách usedQuestions được xóa bỏ để chuẩn bị sử dụng lại các câu hỏi.
        if (usedQuestions.Count == questions.GetLength(0))
        {
            usedQuestions.Clear(); // Xóa danh sách các câu hỏi đã sử dụng
        }

        int index;
        //do { ... } while (usedQuestions.Contains(index));// Bắt đầu một vòng lặp "do-while". Trong vòng lặp này, một số ngẫu nhiên được tạo ra và gán cho biến index. Vòng lặp này sẽ tiếp tục chạy cho đến khi giá trị index không nằm trong danh sách usedQuestions.
        
        do
        {
            index = random.Next(questions.GetLength(0));
        } while (usedQuestions.Contains(index));
        usedQuestions.Add(index); // Thêm câu hỏi vào danh sách đã sử dụng

        //theo thứ tự câu hỏi và câu trả lời
        string question = questions[index, 0];
        string correctAnswer = questions[index, 1];
        string wrongAnswer1 = questions[index, 2];
        string wrongAnswer2 = questions[index, 3];

        // Hoán đổi vị trí các câu trả lời ngẫu nhiên
        string[] answerOptions = new string[] { correctAnswer, wrongAnswer1, wrongAnswer2 };
        ShuffleArray(answerOptions);

        Console.WriteLine(question);
        Console.WriteLine("A. " + answerOptions[0]);
        Console.WriteLine("B. " + answerOptions[1]);
        Console.WriteLine("C. " + answerOptions[2]);

        Console.Write("Hãy nhập đáp án (A, B, hoặc C): ");
        string userInput = Console.ReadLine().ToUpper();

        string userAnswer;
        if (userInput == "A")
        {
            userAnswer = answerOptions[0];
        }
        else if (userInput == "B")
        {
            userAnswer = answerOptions[1];
        }
        else if (userInput == "C")
        {
            userAnswer = answerOptions[2];
        }
        else
        {
            Console.WriteLine("Câu trả lời không hợp lệ!"); 
            Thread.Sleep(500);
            return false;
        }

        if (userAnswer == correctAnswer)
        {
            Console.WriteLine("Chính xác!");
            Thread.Sleep(500);
            return true;
        }
        else
        {
            Console.WriteLine("Sai rồi!");
            Thread.Sleep(500);
            return false;
        }
    }

    static void ShuffleArray<T>(T[] array)
    {
        int n = array.Length;
        for (int i = 0; i < n; i++)
        {
            int randomIndex = i + random.Next(n - i);
            T temp = array[i];
            array[i] = array[randomIndex];
            array[randomIndex] = temp;
        }
    }
    static bool CheckWin()
    {
        return (playerX == exitX && playerY == exitY);
    }

    static void Main(string[] args)
    {
        while (true)
        {
            string filePath = @"C:\Users\Admin\Music\Seven-Jung-Kook.wav";
            try
            {
                SoundPlayer soundPlayer = new SoundPlayer(filePath);
                soundPlayer.Play();
            }
            catch (FileNotFoundException)
            {
                Console.OutputEncoding = Encoding.UTF8;
                Console.WriteLine("Tệp âm thanh không tồn tại.");
            }
            catch (Exception ex)
            {
                Console.WriteLine("Đã xảy ra lỗi: " + ex.Message);
            }

            Console.CursorVisible = false; // Ẩn con trỏ nhấp nháy trên màn hình console.
            ShowTitle(); // Gọi hàm ShowTitle để hiển thị tựa đề game.

            bool showMenu = true;
            while (showMenu)
            {
                showMenu = MainMenu();
            }

            DrawMenu(); // Vẽ bảng menu hiện đồng thời cùng với mê cung level1.
            stopwatch.Start(); // Khởi động đồng hồ đếm giờ.
            StartGame(); // Gọi hàm StartGame để bắt đầu trò chơi.
            bool displayMaze = true; // Biến theo dõi trạng thái của việc cần trình bày mê cung.

            while (true) // Vòng lặp để vẽ mê cung
            {
                Console.Clear(); // Xóa toàn bộ màn hình
                if (displayMaze) // Mê cung cần được trình bày
                {
                    DrawMaze(); // Gọi hàm DrawMaze để vẽ mê cung
                    displayMaze = false; // Trả về false - không cần phải vẽ lại mê cung trong các vòng lặp tiếp theo.    
                } // Tiếp tục thực hiện các logic của trò chơi
            }
        }
    }

    static bool MainMenu()                                                                  //Giao diện các lựa chọn đầu game
    {
        Console.Clear();                                                                    // Xóa màn hình các hiển thị lúc trước
        Console.OutputEncoding = Encoding.UTF8;                                             // Hiển thị ra màn hình đúng theo tiếng việt
        Console.ForegroundColor = ConsoleColor.DarkRed;                                     // Thiết lập các dòng chữ bên dưới có màu đỏ đậm                                    
        Console.BackgroundColor = ConsoleColor.Gray;                                        // Thiết lập màu nền thành màu 
        Console.SetCursorPosition((Console.WindowWidth - 35) / 2, Console.CursorTop + 10);  // Đặt vị trí con trỏ 
        Console.WriteLine("---- TRÒ CHƠI \"THOÁT KHỎI MẬT THẤT\" ----");                    // Ghi tên trò chơi
        Console.ForegroundColor = ConsoleColor.DarkGreen;                                   // Thiết lập lại dòng chữ bên dưới có màu xanh đậm để nhấn mạnh
        Console.SetCursorPosition((Console.WindowWidth - 14) / 2, Console.CursorTop + 1);
        Console.WriteLine("1. Bắt đầu trò chơi  ");
        Console.ForegroundColor = ConsoleColor.DarkRed;                                     // Thiết lập lại các dòng chữ bên dưới có màu đỏ đậm
        Console.SetCursorPosition((Console.WindowWidth - 14) / 2, Console.CursorTop);
        Console.WriteLine("2. Hướng dẫn chơi    ");
        Console.SetCursorPosition((Console.WindowWidth - 14) / 2, Console.CursorTop);
        Console.WriteLine("3. Lịch sử chơi      ");
        Console.SetCursorPosition((Console.WindowWidth - 14) / 2, Console.CursorTop);
        Console.WriteLine("4. Bật/Tắt âm thanh  ");
        Console.SetCursorPosition((Console.WindowWidth - 14) / 2, Console.CursorTop);
        Console.WriteLine("5. Thoát GAME        ");
        Console.ResetColor();                                                                // Đặt lại màu chữ và màu nền về mặc định
        Console.WriteLine("\nMời bạn chọn từ 1-5");                                          // In ra màn hình Mời chọn các lựa chọn
        Console.CursorVisible = true;                                                        // Hiển thị vị trí con trỏ
        string userInput = Console.ReadLine();                                               // Đọc dữ liệu đầu vào của người dùng                                  
        switch (userInput)                                                                   // Sử dụng switch - case để so sánh dữ liệu nhập vào với các case, sau đó thực thi các lệnh tương ứng
        {
            case "1":
                ResetGame2();
                StartGame();
                return true;
            case "2":
                Console.Clear();
                Console.ForegroundColor = ConsoleColor.DarkRed;
                Console.BackgroundColor = ConsoleColor.Gray;
                Console.SetCursorPosition((Console.WindowWidth - 30) / 2, Console.CursorTop + 10);
                Console.WriteLine("--- Chào mừng bạn đến với trò chơi!!! ---\n");
                Console.ResetColor();
                 Console.WriteLine("             Chào mừng bạn đến với thế giới phiêu lưu kỳ thú của trò chơi \"THOÁT KHỎI MẬT THẤT\"!\n" +
                    "             Trong trò chơi này, bạn sẽ vào vai một nhà thám hiểm trên đường khám phá bị lạc vào một mật thất vòng vo.\n" +
                    "             Điều kỳ lạ là trong mật thất hiện lên những câu hỏi hóc búa buộc bạn phải vắt óc giải mã để tìm thấy\n             lời giải đáp thoát khỏi mật thất ở level 1.\n" +
                    "             Hãy dùng các phím mũi tên để điều khiển nhân vật của bạn khám phá các ngóc ngách của mật thất.\n" +
                    "             Thời gian là yếu tố quyết định điểm số của bạn - nhanh chóng thoát khỏi mật thất để nhận điểm số cao hơn.\n" +
                    "             Ở level 1, nếu bạn thoát được mật thất ngắn hơn 30 giây thì bạn sẽ được 100 điểm" +
                    "\n                                                    ngắn hơn 1 phút thì bạn sẽ được 50 điểm" +
                    "\n                                                    ngắn hơn 2 phút thì bạn sẽ được 25 điểm" +
                    "\n                                                    nếu lâu hơn 2 phút bạn sẽ chỉ được 10 điểm" +
                    "\n             Tuy nhiên, nếu bạn đã bị chặn hết đường thì bạn có thể gọi bảng menu, sau đó lựa chọn \"Bắt đầu lại game\"\n             hoặc \"Thoát game\" nhé!\n" +
                    "             Ở level 2, bạn chỉ có 30 giây để thoát khỏi mật thất khi không gian xung quanh trở nên tối tăm và đáng sợ," +
                    "\n             nếu quá 30 giây thì bạn sẽ không vượt qua được level 2.\n" +
                    "\n             Ban đầu bạn sẽ có điểm cho level này là 100, mỗi giây trôi qua khi bạn còn ở trong mật thất thì\n             bạn sẽ bị trừ 1 điểm." +
                    "\n                   => Nhấn phím \"Enter\" để chuẩn bị đến với trò chơi nào!");
                Console.ReadLine();
                return true;
            case "3":
                try
                {
                    Console.Clear();
                    string showlichsu = File.ReadAllText("lichsu.txt");
                    Console.WriteLine(showlichsu);
                    Console.WriteLine(showlichsu.GetType().ToString());
                    Console.ReadLine();
                }
                catch (FileNotFoundException)                                 // Xử lý lỗi khi chưa có lượt chơi nào xảy ra-chk có kỹ lục
                {
                    Console.WriteLine("Không tìm thấy tệp lichsu.txt.");
                    Console.ReadLine();
                }
                catch(Exception)
                {
                    Console.WriteLine("Đã xảy ra lỗi");
                }
                return true;
            case "4":
                ToggleSound(); // Gọi hàm để tắt/bật âm thanh
                return true;
            case "5":
                ExitGame();
                return false;
            default:
                return true;
        }
    }

    static bool isSoundPlaying = true; // Biến theo dõi trạng thái âm thanh
    static void ToggleSound()
    {
        if (isSoundPlaying)
        {
            SoundPlayer soundPlayer = new SoundPlayer(@"C:\Users\Admin\Music\Seven-Jung-Kook.wav");
            soundPlayer.Stop(); // Tắt âm thanh
            isSoundPlaying = false;
            Console.WriteLine("Đã tắt âm thanh.");
        }
        else
        {
            SoundPlayer soundPlayer = new SoundPlayer(@"C:\Users\Admin\Music\Seven-Jung-Kook.wav");
            soundPlayer.Play(); // Bật âm thanh
            isSoundPlaying = true;
            Console.WriteLine("Đã bật âm thanh.");
        }
    }

    static void ResetGame2()
    {
        playerX = 1;
        playerY = 1;
        stopwatch.Reset();
        pausedTime = TimeSpan.Zero;

        // Khôi phục mê cung gốc
        for (int i = 0; i < maze.GetLength(0); i++)
        {
            for (int j = 0; j < maze.GetLength(1); j++)
            {
                maze[i, j] = originalMaze[i, j];
            }
        }
        Console.Clear();
    }

    static void ShowMenu() {
    // Xóa màn hình console và thiết lập màu sắc của văn bản và nền
    Console.Clear();
    Console.ForegroundColor = ConsoleColor.DarkBlue;
    Console.BackgroundColor = ConsoleColor.Gray;

    // Đặt con trỏ văn bản đến vị trí trung tâm màn hình và in ra tiêu đề menu
    Console.SetCursorPosition((Console.WindowWidth - 40) / 2, Console.CursorTop + 10);
    Console.WriteLine("-------- BẢNG MENU --------");

    // In ra các lựa chọn trong menu
    Console.SetCursorPosition((Console.WindowWidth - 40) / 2, Console.CursorTop + 1);
    Console.WriteLine("1. Lịch sử ");
    Console.SetCursorPosition((Console.WindowWidth - 40) / 2, Console.CursorTop);
    Console.WriteLine("2. Dừng tạm thời ");
    Console.SetCursorPosition((Console.WindowWidth - 40) / 2, Console.CursorTop);
    Console.WriteLine("3. Tiếp tục ");
    Console.SetCursorPosition((Console.WindowWidth - 40) / 2, Console.CursorTop);
    Console.WriteLine("4. Bắt đầu lại game ");
    Console.SetCursorPosition((Console.WindowWidth - 40) / 2, Console.CursorTop);
    Console.WriteLine("5. Tắt/Bật âm thanh ");
    Console.SetCursorPosition((Console.WindowWidth - 40) / 2, Console.CursorTop);
    Console.WriteLine("6. Thoát game ");

    // Đặt lại màu sắc mặc định và yêu cầu người dùng chọn một tùy chọn từ 1-6
    Console.ResetColor();
    Console.WriteLine("\nMời bạn chọn từ 1-6");

    // Đọc lựa chọn của người dùng từ bàn phím
    string userInput = Console.ReadLine();

    // Xử lý lựa chọn của người dùng dựa trên giá trị nhập vào
    switch (userInput)
    {
        case "1":
            // Trường hợp người chơi chọn "1"
            // Xóa màn hình console
            Console.Clear();

            // Đọc nội dung từ tệp "lichsu.txt" và in ra màn hình
            string showlichsu = File.ReadAllText("lichsu.txt");
            Console.WriteLine(showlichsu);
            Console.WriteLine(showlichsu.GetType().ToString());
            Console.ReadLine();
            break;

        case "2":
            // Trường hợp người chơi chọn "2"
            // Kiểm tra nếu trò chơi chưa bị tạm dừng trước đó
            if (!isPaused)
            {
                // Dừng đồng hồ đếm thời gian
                stopwatch.Stop();
                isPaused = true;

                // Lưu thời gian đã dừng tạm thời
                pausedTime = stopwatch.Elapsed;

                Console.WriteLine("Đã dừng tạm thời...");

                // Sao chép mê cung hiện tại vào savedMaze
                int rows = maze.GetLength(0);
                int cols = maze.GetLength(1);
                savedMaze = new char[rows, cols];
                for (int i = 0; i < rows; i++)
                {
                    for (int j = 0; j < cols; j++)
                    {
                        savedMaze[i, j] = maze[i, j];
                    }
                }

                // Lưu vị trí của người chơi
                savedPlayerRow = playerX;
                savedPlayerCol = playerY;
            }

            // Dừng chương trình trong 2 giây để người dùng có thể nhìn thấy thông báo
            Thread.Sleep(2000);

            // Hiển thị menu lại
            ShowMenu();
            break;

        case "3":
            // Trường hợp người chơi chọn "3"
            // Kiểm tra nếu trò chơi đã bị tạm dừng
            if (isPaused)
            {
                // Tiếp tục trò chơi
                ResumeGame();
            }
            else
            {
                Console.WriteLine("Bạn phải dừngtạm thời trước khi quay lại mê cung.");
                Thread.Sleep(3000); // Dừng 3 giây để người dùng có thể nhìn thấy thông báo
                ShowMenu();
            }
            break;

        case "4":
            // Trường hợp người chơi chọn "4"
            // Đặt lại trạng thái trò chơi về ban đầu
            ResetGame();
            break;

        case "5":
            // Trường hợp người chơi chọn "5"
            // Thay đổi trạng thái âm thanh (tắt/bật)
            ToggleSound();
            break;

        case "6":
            // Trường hợp người chơi chọn "6"
            // Thoát khỏi trò chơi
            ExitGame();
            break;

        default:
            // Trường hợp người chơi nhập lựa chọn không hợp lệ
            Console.WriteLine("Lựa chọn không hợp lệ. Vui lòng chọn lại.");
            ShowMenu(); // Hiển thị menu lại
            break;
    }
}

static void PrintCenteredText(string text)                                //TẠO HIỆU ỨNG RƠI CHẬM CHO TÊN GAME
    {
        Console.InputEncoding = Encoding.UTF8;
        int consoleWidth = Console.WindowWidth;
        int consoleHeight = Console.WindowHeight;
        int leftMargin = (consoleWidth - text.Length) / 2;
        int topMargin = (consoleHeight - 1) / 2 - 8;

        Console.SetCursorPosition(leftMargin, topMargin);

        for (int i = 0; i < text.Length; i++)
        {
            Console.SetCursorPosition(leftMargin + i, Console.CursorTop);
            Console.Write(text[i]);
            System.Threading.Thread.Sleep(60);                                // Đợi 50 milliseconds giữa mỗi ký tự
        }
        using (FileStream lichsu = new FileStream("lichsu.txt", FileMode.Append, FileAccess.Write))
        {
            Console.InputEncoding = Encoding.UTF8;
            Console.OutputEncoding = Encoding.UTF8;
            Console.SetCursorPosition(leftMargin, topMargin + 1);
            Console.WriteLine();
            Console.WriteLine("Hãy nhập tên của bạn: ");
            StreamWriter Lichsuchoi = new StreamWriter(lichsu);
            Lichsuchoi.Write("--------------------------------" + "\n" + Console.ReadLine() + "\n");
            Lichsuchoi.Flush();
        }
    }

    static void StartGame()
    {
        Console.OutputEncoding = Encoding.UTF8;
        Console.InputEncoding = Encoding.UTF8;
        Console.Clear();

        //TÊN GAME
        string gameName = "GAME THOÁT KHỎI MẬT THẤT";                                                   // TẠO TÊN CHO GAME
        Console.ForegroundColor = ConsoleColor.DarkRed;                                                 // Đặt màu chữ là màu 
        Console.BackgroundColor = ConsoleColor.Gray;                                                    // Đặt màu nền là màu 
        PrintCenteredText("------ " + gameName + " ------");
        Console.ResetColor();                                                                           // Đặt lại màu chữ và màu nền mặc định

        // THỜI GIAN
        DateTime startTime = DateTime.Now;                                                              // Lấy thời điểm bắt đầu chơi game

        // Hiển thị ngày và giờ bắt đầu chơi game
        Console.WriteLine("\n" + "--------------------------------");
        Console.WriteLine("day: " + startTime.ToShortDateString());
        Console.WriteLine("time: " + startTime.ToString("HH\\:mm\\:ss"));

        Console.CursorVisible = true; // Hiển thị con trỏ nhấp nháy trong console
        Console.ReadKey(); // Chờ người dùng nhấn một phím bất kỳ để bắt đầu trò chơi
        Console.WriteLine(); // Xuống dòng để tạo khoảng trống giữa thông báo và mê cung
        stopwatch = new Stopwatch();// Khởi tạo đối tượng Stopwatch để đếm thời gian
        stopwatch.Start(); // Bắt đầu đồng hồ đếm thời gian
        int score = 0; // Khởi tạo điểm số ban đầu
        while (true) // Vòng lặp chính của trò chơi
        {                
            Console.Clear(); // Xóa màn hình console để vẽ lại các phần tử mới
            DrawMenu(); // Vẽ menu
            DrawMaze(); // Vẽ mê cung
            ConsoleKey key = Console.ReadKey().Key; // Đọc phím người dùng nhập vào

            if (key == ConsoleKey.M) // Kiểm tra phím được nhấn
            {
                // Trường hợp người chơi nhấn phím "M" để hiển thị menu
                ShowMenu();
            }
            else
            {
                // Trường hợp người chơi nhấn một phím di chuyển
                MovePlayer(key); // Di chuyển người chơi trong mê cung dựa trên phím nhấn
            }
            if (!isPaused)
            {
                if (CheckWin())
                {
                    Console.Clear();
                    DrawMaze();
                    Console.WriteLine("Chúc mừng bạn đã thắng level 1");
                    Console.WriteLine("Hãy nhấn phím 'Enter' để xem điểm và thời gian chơi của bạn");
                    stopwatch.Stop();
                    Console.ReadKey(true);
                    TimeSpan elapsedTime = stopwatch.Elapsed;
                    Console.WriteLine("Thời gian chơi: " + elapsedTime.ToString("mm\\:ss"));
                    if (elapsedTime < TimeSpan.FromSeconds(30))
                    { score += 100; }
                    else if (elapsedTime < TimeSpan.FromMinutes(1))
                    { score += 50; }
                    else if (elapsedTime < TimeSpan.FromMinutes(2))
                    { score += 25; }
                    else { score += 10; }
                    Console.WriteLine("Điểm của bạn là: " + score);
                    using (FileStream lichsu = new FileStream("lichsu.txt", FileMode.Append, FileAccess.Write))            // xử lý ngoại lệ (th đặc biệt của try-catch-family)
                    {
                        Console.InputEncoding = Encoding.UTF8;
                        Console.OutputEncoding = Encoding.UTF8;
                        StreamWriter Lichsuchoi = new StreamWriter(lichsu);
                        Lichsuchoi.Write("Bạn đã vượt qua level 1 với số điểm:" + score + "\n");
                        Lichsuchoi.WriteLine("Thời gian chơi của bạn là: " + elapsedTime.ToString("mm\\:ss"));
                        Lichsuchoi.Write("Thời gian bắt đầu: " + startTime.ToString("HH\\:mm\\:ss") + ", " + startTime.ToShortDateString() + "\n");
                        Lichsuchoi.Flush();
                    }
                        Console.WriteLine("Bạn có muốn tiếp tục trò chơi không^^");
                        Console.WriteLine("1. Tiếp tục đến với level 2");
                        Console.WriteLine("2. Dừng lại tại đây thôi!");
                        Console.WriteLine("Mời nhập lựa chọn của bạn: ");
                    while (true)
                    { 
                        string choice = Console.ReadLine();

                        if (choice == "1")
                        {
                            // Code để qua màn 2
                            Console.WriteLine("Bạn đã qua level 2");
                            Console.Clear();
                            Console.WriteLine("Để tiếp tục nhấn 'Enter'");

                            //vẽ maze
                            bool[][] mazeLayout =
                                {
                                new [] {true, true, true, true, true, true, true, true, false, true, true, true, true},
                                new [] {true, false, false, false, true, false, true, true, false, false, true, true, true},
                                new [] {true, false, true, false, true, false, true, true, true, false, true, true, true},
                                new [] {true, false, true, false, true, false, true, true, true, false, false, false, true},
                                new [] {true, false, true, false, true, false, true, true, true, false, true, true, true},
                                new [] {true, false, true, true, true, false, true, true, true, false, false, false, true},
                                new [] {true, false, true, false, false, false, true, true, true, false, true, true, true},
                                new [] {true, false, true, false, true, false, true, true, true, false, true, false, true},
                                new [] {true, false, true, false, true, false, true, true, true, false, true, false, true},
                                new [] {true, false, true, false, true, false, false, false, false, false, true, false, true},
                                new [] {true, false, true, false, true, true, true, true, true, true, true, false, true},
                                new [] {true, false, true, false, false, false, false, false, false, false, false, false, true},
                                new [] {true, false, true, true, true, true, true, true, true, true, true, false, true},
                                new [] {true, false, false, false, false, false, false, false, false, false, false, false, true},
                                new [] {true, true, true, true, true, true, true, true, true, false, true, true, true}
                                };
                            // Đặt các biến
                            const char wallChar = '\u2588'; // Ký tự đại diện cho tường trong mê cung
                            const char mazeChar = '\u0020'; // Ký tự đại diện cho không gian trong mê cung
                            int exitRow = 0;                // Hàng của lối thoát trong mê cung
                            int exitColumn = 8;             // Cột của lối thoát trong mê cung

                            // In mê cung
                            for (int i = 0; i < mazeLayout.Length; i++)
                            {
                                for (int j = 0; j < mazeLayout[i].Length; j++)
                                {
                                    if (mazeLayout[i][j])
                                    {
                                        Console.Write(wallChar);
                                    }
                                    else
                                    {
                                        if (i == exitRow && j == exitColumn)
                                        {
                                            Console.Write("E"); // In ký tự đại diện cho lối thoát
                                        }
                                        else
                                        {
                                            Console.Write(mazeChar);
                                        }
                                    }
                                }
                                Console.WriteLine(); // Xuống dòng sau khi in một hàng
                            }

                            // Đặt biến
                            int playerRow = 14;                          // Hàng hiện tại của người chơi
                            int playerColumn = 9;                        // Cột hiện tại của người chơi
                            TimeSpan maxTime = TimeSpan.FromSeconds(30); // Thời gian tối đa để hoàn thành mê cung
                            stopwatch = new Stopwatch();                 // Khởi tạo đối tượng Stopwatch để đếm thời gian
                            stopwatch.Start();                           // Bắt đầu đếm thời gian
                            while (true)
                            {
                            PrintMazeWithVisibilityMap();
                            // Kiểm tra thời gian đã vượt quá thời gian tối đa hay chưa
                            if (stopwatch.Elapsed > maxTime)
                            {
                            // Thông báo cho người chơi rằng thời gian đã hết
                            Console.SetCursorPosition((Console.WindowWidth - 40) / 2, Console.CursorTop + 1);
                            Console.WriteLine("Đã hết 30 giây. Bạn không tìm thấy vị trí exit.");
                            Thread.Sleep(300);
                            Console.SetCursorPosition((Console.WindowWidth - 40) / 2, Console.CursorTop + 1);
                            elapsedTime = elapsedTime.Add(TimeSpan.FromSeconds(30));
                            Console.WriteLine("Tổng thời gian chơi: " + elapsedTime.ToString("mm\\:ss"));
                            Thread.Sleep(300);
                            Console.SetCursorPosition((Console.WindowWidth - 40) / 2, Console.CursorTop + 1);
                            Console.WriteLine("Tổng điểm của bạn là: " + score);
                            Thread.Sleep(300);
                            Console.SetCursorPosition((Console.WindowWidth - 40) / 2, Console.CursorTop + 1);
                            Console.WriteLine("Nhấn Enter để quay về màn hình chính ");
                            Console.ReadKey();
                            string filePath = "lichsu.txt";
                            int linesToDelete = 3;
                            // Đọc nội dung file vào một mảng các dòng
                            string[] lines = File.ReadAllLines(filePath);
                            // Kiểm tra xem có đủ số dòng để xóa hay không
                            if (lines.Length <= linesToDelete)
                            {
                             // Nếu không đủ dòng để xóa, bạn có thể xử lý tùy ý ở đây
                            Console.WriteLine("Không đủ dòng để xóa.");
                            return;
                            }

                             // Giữ lại các dòng từ đầu cho đến n - linesToDelete
                            string[] remainingLines = lines.Take(lines.Length - linesToDelete).ToArray();

                            // Ghi nội dung còn lại vào file, ghi đè nội dung cũ
                            File.WriteAllLines(filePath, remainingLines);
                            using (FileStream lichsu = new FileStream("lichsu.txt", FileMode.Append, FileAccess.Write))            // xử lý ngoại lệ (th đặc biệt của try-catch-family)
                            {
                                 Console.InputEncoding = Encoding.UTF8;
                                 Console.OutputEncoding = Encoding.UTF8;
                                 StreamWriter Lichsuchoi = new StreamWriter(lichsu);
                                 Lichsuchoi.Write("Bạn chưa vượt qua 2 level\n" + "Tổng điểm:" + score + "\n");
                                 Lichsuchoi.WriteLine("Thời gian chơi của bạn là (bao gồm 30s ở level 2): " + elapsedTime.ToString("mm\\:ss"));
                                 Lichsuchoi.Write("Thời gian bắt đầu: " + startTime.ToString("HH\\:mm\\:ss") + ", " + startTime.ToShortDateString() + "\n");
                                 Lichsuchoi.Flush();
                            }
                            break;
                            }

                                // Di chuyển của nhân vật
                                switch (Console.ReadKey(true).Key)
                                {
                                    case ConsoleKey.UpArrow:
                                        if (IsValidMove(playerRow - 1, playerColumn))
                                        {
                                            playerRow--; // Di chuyển người chơi lên
                                        }
                                        break;
                                    case ConsoleKey.DownArrow:
                                        if (IsValidMove(playerRow + 1, playerColumn))
                                        {
                                            playerRow++; // Di chuyển người chơi xuống
                                        }
                                        break;
                                    case ConsoleKey.LeftArrow:
                                        if (IsValidMove(playerRow, playerColumn - 1))
                                        {
                                            playerColumn--; // Di chuyển người chơi qua trái
                                        }
                                        break;
                                    case ConsoleKey.RightArrow:
                                        if (IsValidMove(playerRow, playerColumn + 1))
                                        {
                                            playerColumn++; // Di chuyển người chơi qua phải
                                        }
                                        break;
                                    default:
                                        break;
                                }
                                Console.Clear(); // Xóa màn hình để vẽ lại mê cung sau khi di chuyển người chơi
                                if (playerRow == exitRow && playerColumn == exitColumn) 
                                {
                                    stopwatch.Stop();
                                    TimeSpan elapsedTimess = stopwatch.Elapsed;
                                    TimeSpan sumelapsedTime = elapsedTimess + elapsedTime;
                                    Console.WriteLine("Thời gian chơi: " + elapsedTimess.ToString("mm\\:ss"));
                                    Console.ReadKey();
                                    int secondsPlayed = (int)elapsedTimess.TotalSeconds;
                                    int totalScore = 100 - secondsPlayed;

                                    Console.WriteLine("Chúc mừng bạn đã tìm thấy lối ra cuối cùng!");
                                    Console.WriteLine("Điểm level 2 của bạn là: " + totalScore);
                                    int totalscore = totalScore + score;
                                    Console.WriteLine("Điểm tổng của bạn là: " + totalscore);
                                    Console.ReadKey();

                                    string filePath = "lichsu.txt";
                                    int linesToDelete = 3;
                                    // Đọc nội dung file vào một mảng các dòng
                                    string[] lines = File.ReadAllLines(filePath);
                                    // Kiểm tra xem có đủ số dòng để xóa hay không
                                    if (lines.Length <= linesToDelete)
                                    {
                                        // Nếu không đủ dòng để xóa, bạn có thể xử lý tùy ý ở đây
                                        Console.WriteLine("Không đủ dòng để xóa.");
                                        return;
                                    }

                                    // Giữ lại các dòng từ đầu cho đến n - linesToDelete
                                    string[] remainingLines = lines.Take(lines.Length - linesToDelete).ToArray();

                                    // Ghi nội dung còn lại vào file, ghi đè nội dung cũ
                                    File.WriteAllLines(filePath, remainingLines);
                                    using (FileStream lichsu = new FileStream("lichsu.txt", FileMode.Append, FileAccess.Write))            // xử lý ngoại lệ (th đặc biệt của try-catch-family)
                                    {
                                        Console.InputEncoding = Encoding.UTF8;
                                        Console.OutputEncoding = Encoding.UTF8;
                                        StreamWriter Lichsuchoi = new StreamWriter(lichsu);
                                        Lichsuchoi.Write("Bạn đã vượt qua 2 level\n" + "Tổng điểm:" + totalscore + "\n");
                                        Lichsuchoi.WriteLine("Thời gian chơi của bạn là: " + sumelapsedTime.ToString("mm\\:ss"));
                                        Lichsuchoi.Write("Thời gian bắt đầu: " + startTime.ToString("HH\\:mm\\:ss") + ", " + startTime.ToShortDateString() + "\n");
                                        Lichsuchoi.Flush();
                                    }
                                    break;
                                }
                                else
                                {
                                    for (int i = 0; i < mazeLayout.Length; i++)
                                    {
                                        for (int j = 0; j < mazeLayout[i].Length; j++)
                                        {
                                            if (mazeLayout[i][j])
                                            {
                                                Console.Write(wallChar);
                                            }
                                            else if (i == playerRow && j == playerColumn)
                                            {
                                                Console.ForegroundColor = ConsoleColor.Yellow;
                                                Console.Write("☺");
                                                Console.ForegroundColor = ConsoleColor.DarkGray;
                                            }
                                            else if (i == exitRow && j == exitColumn)
                                            {
                                                Console.Write("E");
                                            }
                                            else
                                            {
                                                Console.Write(mazeChar);

                                            }
                                        }
                                        Console.WriteLine();
                                    }

                                }
                            }
                     
                            bool IsValidMove(int row, int column)
                            {
                                if (row >= 0 && row < mazeLayout.Length && column >= 0 && column < mazeLayout[row].Length && !mazeLayout[row][column])
                                {
                                    return true;
                                }
                                return false;
                            }

                            void UpdateVisibilityMap()
                            {
                                bool[][] visibilityMap = new bool[mazeLayout.Length][];                          // Khai báo 1 mảng 2 chiều visibilityMap để biểu thị khả năng nhìn thấy của từng ô trong mê cung
                                for (int i = 0; i < mazeLayout.Length; i++)                                      // Khởi tạo mảng visibilityMap với kích thước tương ứng với kích thước của mazeLayout
                                {
                                    visibilityMap[i] = new bool[mazeLayout[i].Length];
                                }

                                for (int i = Math.Max(0, playerRow - 2); i <= Math.Min(mazeLayout.Length - 1, playerRow + 2); i++)               // Duyệt qua các ô xung quanh vị trí của người chơi (trong phạm vi 2 ô) và đánh dấu các ô tương ứng trong visibilityMap là true 
                                {
                                    for (int j = Math.Max(0, playerColumn - 2); j <= Math.Min(mazeLayout[i].Length - 1, playerColumn + 2); j++)
                                    {
                                        visibilityMap[i][j] = true;
                                    }
                                }

                                visibilityMap[playerRow][playerColumn] = true;                                                                   // Đánh dấu vị trí của người chơi trong visibilityMap là true

                                for (int i = 0; i < mazeLayout.Length; i++)                                                                      // Duyệt qua mazeLayout và in ra các ô dựa trên giá trị của visibilityMap
                                {
                                    for (int j = 0; j < mazeLayout[i].Length; j++)
                                    {
                                        if (visibilityMap[i][j])
                                        {
                                            Console.SetCursorPosition(j, i);
                                            if (i == playerRow && j == playerColumn)
                                            {
                                                Console.Write('☺');
                                            }
                                            else if (i == exitRow && j == exitColumn)
                                            {
                                                Console.Write('E');
                                            }
                                            else
                                            {
                                                Console.Write(mazeLayout[i][j] ? wallChar : mazeChar);
                                            }
                                        }
                                    }
                                }

                                Console.SetCursorPosition(playerColumn, playerRow);                                                             // Đặt vị trí con trỏ in của Console tại vị trí của người chơi
                            }

                            void PrintMazeWithVisibilityMap()                                                                                   // Xóa màn hình và gọi hàm UpdateVisibilityMap để cập nhật và in ra bản đồ mê cung với bản đồ hiển thị khả năng nhìn thấy 
                            {
                                Console.Clear();
                                UpdateVisibilityMap();
                            }

                            break;
                        }
                        else if (choice == "2")
                        {
                            // Code để thoát game
                            MainMenu();
                            break;
                        }
                        else
                        {
                            Console.WriteLine("Lựa chọn không hợp lệ. Vui lòng chọn lại.");
                        }
                    }

                    break;
                }
            }
        }
    }

    static void ShowTitle() // Phương thức để hiển thị tựa đề trên màn hình nhấp nháy
    {
    Console.ForegroundColor = ConsoleColor.Red; // Đặt màu chữ là màu đỏ
    Console.OutputEncoding = Encoding.UTF8; // Đặt bảng mã xuất ra là UTF-8 để hỗ trợ hiển thị các ký tự đặc biệt
    string title = " THOÁT KHỎI MẬT THẤT "; // Chuỗi tựa đề
    int leftMargin = (Console.WindowWidth - title.Length) - 60 / 2; // Tính toán lề trái dựa trên chiều rộng của cửa sổ console và độ dài của tựa đề
    int topMargin = Console.WindowHeight - 24 / 2; // Tính toán lề trên dựa trên chiều cao của cửa sổ console
    Console.SetCursorPosition(leftMargin, topMargin); // Đặt vị trí con trỏ đến để viết tựa đề trên màn hình console
    Console.WriteLine(title); // In tựa đề lên màn hình console
    Console.ForegroundColor = ConsoleColor.Yellow; // Đặt màu chữ là màu vàng
    DrawBlinkingStars(leftMargin - 2, topMargin - 2, title.Length + 4); // Gọi phương thức DrawBlinkingStars để vẽ khung sao xung quanh tựa đề
    }

    static void DrawBlinkingStars(int x, int y, int width)
{
    // Tạo một đối tượng Random để tạo số ngẫu nhiên
    Random random = new Random();
    
    // Biến để kiểm tra trạng thái xuất hiện của dòng chữ
    bool titleDisplayed = false;
    
    // Biến để kiểm soát trạng thái nhấp nháy
    bool blinking = true;

    // Vòng lặp sẽ tiếp tục cho đến khi dòng chữ được xuất hiện
    while (!titleDisplayed)
    {
        // Đặt vị trí con trỏ của console tại vị trí (x, y)
        Console.SetCursorPosition(x, y);

        // Vẽ các dấu sao và khoảng trắng ngẫu nhiên để tạo hiệu ứng nhấp nháy
        for (int i = 0; i < width; i++)
        {
            if (random.Next(2) == 0)
                Console.Write("*");
            else
                Console.Write(" ");
        }

        // Vẽ khung chữ nhật xung quanh dòng chữ
        for (int i = 1; i < 4; i++)
        {
            Console.SetCursorPosition(x, y + i);
            Console.Write("*");
            Console.SetCursorPosition(x + width - 1, y + i);
            Console.Write("*");
        }

        Console.SetCursorPosition(x, y + 4);

        // Tiếp tục vẽ các dấu sao và khoảng trắng ngẫu nhiên
        for (int i = 0; i < width; i++)
        {
            if (random.Next(2) == 0)
                Console.Write("*");
            else
                Console.Write(" ");
        }

        // Đợi 0.3 giây để tạo hiệu ứng nhấp nháy
        Thread.Sleep(300);

        Console.SetCursorPosition(x, y);

        // Vẽ lại dòng chữ với trạng thái nhấp nháy thay đổi
        for (int i = 0; i < 5; i++)
        {
            Console.SetCursorPosition(x, y + i);

            if (i == 1 || i == 3 || i == 5)
            {
                if (blinking)
                {
                    Console.Write("*");
                    Console.SetCursorPosition(x + width - 1, y + i);
                    Console.Write("*");
                }
                else
                {
                    Console.Write(" ");
                    Console.SetCursorPosition(x + width - 1, y + i);
                    Console.Write(" ");
                }
            }
            else if (i == 2 || i == 4)
            {
                if (blinking)
                {
                    Console.Write("*");
                    Console.SetCursorPosition(x + width - 1, y + i);
                    Console.Write("*");
                }
                else
                {
                    Console.Write(" ");
                    Console.SetCursorPosition(x + width - 1, y + i);
                    Console.Write(" ");
                }
            }
            else
            {
                Console.Write("*");
                for (int j = 1; j < width - 1; j++)
                {
                    Console.Write(" ");
                }
                Console.Write("*");
            }
        }

        // Đợi 0.3 giây trước khi vẽ lại dòng chữ
        Thread.Sleep(300);

        // Kiểm tra nếu có phím được nhấn
        if (Console.KeyAvailable)
        {
            ConsoleKeyInfo keyInfo = Console.ReadKey(true);
            
            // Kiểm tra nếu phím nhấn không phải là phím Escape
            if (keyInfo.Key != ConsoleKey.Escape)
                titleDisplayed = true;
        }
        
        // Đảo ngược trạng thái nhấp nháy
        blinking = !blinking;
    }
}

static void DrawMenu()
{
    // Vị trí X của menu
    int menuX = 30;
    
    // Vị trí Y của menu
    int menuY = 0;

    // Đặt vị trí con trỏ của console để vẽ menu
    Console.SetCursorPosition(menuX, menuY);
    
    // Đặt màu chữ là trắng và màu nền là xanh đậm.
    Console.ForegroundColor = ConsoleColor.White;
    Console.BackgroundColor = ConsoleColor.DarkBlue;
    
    // In ra màn hình dòng chữ "MENU (Nhấn 'M' hoặc 'm' để mở)"
    Console.WriteLine("MENU (Nhấn 'M' hoặc 'm' để mở)");
    
    // Đặt lại màu chữ và màu nền về mặc định
    Console.ResetColor();
}

    static void ResetGame()
    {
        playerX = 1;
        playerY = 1;
        stopwatch.Reset();
        pausedTime = TimeSpan.Zero;

        // Khôi phục mê cung gốc
        for (int i = 0; i < maze.GetLength(0); i++)
        {
            for (int j = 0; j < maze.GetLength(1); j++)
            {
                maze[i, j] = originalMaze[i, j];
            }
        }

        Console.WriteLine("Game đã được reset. Bắt đầu lại từ đầu.");
        Thread.Sleep(2000);
        Console.Clear();
        stopwatch.Start();
        isPaused = false;
    }

    static void ResumeGame()
    {
        isPaused = false;
        // Sử dụng trạng thái đã lưu trong biến toàn cục để tiếp tục chơi
        // ...
        // Khôi phục trạng thái của mê cung
        Array.Copy(savedMaze, maze, savedMaze.Length);
        // Khôi phục trạng thái vị trí người chơi
        playerX = savedPlayerRow;
        playerY = savedPlayerCol;
        // Tiếp tục thực hiện logic chơi game từ vị trí tạm dừng
        stopwatch.Start(); // Bắt đầu đồng hồ đếm thời gian lại
    }

    static void ExitGame()
    {
        Console.Clear();
        string message = "Cảm ơn bạn đã chơi game";
        int consoleWidth = Console.WindowWidth;
        int consoleHeight = Console.WindowHeight;
        int leftMargin = (consoleWidth - message.Length) / 2;
        int topMargin = consoleHeight / 2;

        Console.SetCursorPosition(leftMargin, topMargin);
        Console.WriteLine(message);
        Thread.Sleep(2000); // Dừng 2 giây để người dùng đọc thông báo

        Environment.Exit(0); // Kết thúc chương trình
    }
}
